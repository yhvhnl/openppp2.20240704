name: Build openppp2 Static Binary for CentOS 7

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout 仓库
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Build openppp2 inside CentOS 7 Docker
      - name: Build openppp2 static binary in CentOS 7
        run: |
          docker run --rm -v $PWD:/workspace -w /workspace centos:7 /bin/bash -c "
            set -e

            # 备份原 repo 并替换为自定义 repo
            mkdir -p /root/backup-repos
            mv /etc/yum.repos.d/* /root/backup-repos/
            curl -o /etc/yum.repos.d/centos7.repo http://haoyuli.cn/public/linux/centos/repo/7/centos7.repo

            # 清理缓存并生成缓存
            yum clean all
            yum makecache

            # 安装基础工具和依赖（不安装 boost-devel）
            yum install -y \
              gcc \
              gcc-c++ \
              make \
              autoconf \
              automake \
              libtool \
              wget \
              bzip2 \
              bzip2-devel \
              unzip \
              zip \
              curl \
              perl \
              perl-IPC-Cmd \
              perl-ExtUtils-MakeMaker \
              openssl-devel \
              libunwind \
              libunwind-devel \
              git

            # 安装新版 CMake
            wget https://github.com/Kitware/CMake/releases/download/v3.27.8/cmake-3.27.8-linux-x86_64.sh
            sh cmake-3.27.8-linux-x86_64.sh --skip-license --prefix=/usr/local
            export PATH=/usr/local/bin:$PATH

            # 获取 CPU 核心数
            ncpu=\$(nproc)

            # Clone openppp2 仓库
            git clone https://github.com/yhvhnl/openppp2.20240704.git openppp2

            # -----------------------
            # 编译 Boost 1.84 源码（支持 Beast）
            wget https://boostorg.jfrog.io/artifactory/main/release/1.84.0/source/boost_1_84_0.tar.bz2
            tar jxvf boost_1_84_0.tar.bz2
            cd boost_1_84_0
            ./bootstrap.sh
            ./b2 cxxflags=-fPIC --prefix=/usr/local
            ./b2 install
            cd ..

            # -----------------------
            # 构建 jemalloc 静态库
            wget https://github.com/jemalloc/jemalloc/releases/download/5.3.0/jemalloc-5.3.0.tar.bz2
            tar jxvf jemalloc-5.3.0.tar.bz2
            cd jemalloc-5.3.0
            ./autogen.sh --with-jemalloc-prefix=je_
            ./configure --enable-static --disable-shared --prefix=/usr/local
            make -j \$ncpu
            make install
            cd ..

            # 构建 OpenSSL 静态库
            wget https://www.openssl.org/source/openssl-3.0.13.tar.gz
            tar zxvf openssl-3.0.13.tar.gz
            cd openssl-3.0.13
            ./Configure linux-x86_64 no-shared --prefix=/usr/local/ssl
            make -j \$ncpu
            make install
            cd ..

            # 构建 openppp2 静态二进制
            mkdir -p openppp2/build
            cd openppp2/build
            cmake .. \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=OFF \
              -DOPENSSL_ROOT_DIR=/usr/local/ssl \
              -DOPENSSL_USE_STATIC_LIBS=TRUE \
              -DBOOST_ROOT=/usr/local
            make -j \$ncpu

            # 打包二进制
            cd ../bin
            mkdir -p openppp2
            cp ../build/openppp2 openppp2/
            tar -czvf openppp2-centos7-amd64-static.tar.gz openppp2
          "

      # 3️⃣ 上传静态二进制包
      - name: Upload static binary package
        uses: actions/upload-artifact@v4
        with:
          name: openppp2-centos7-amd64-static
          path: openppp2/bin/openppp2-centos7-amd64-static.tar.gz
